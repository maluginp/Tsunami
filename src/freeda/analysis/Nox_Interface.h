// Interface file for the NOX solver

#ifndef TEST_EPETRA_1DFEM_INTERFACE_EPETRANEW_H
#define TEST_EPETRA_1DFEM_INTERFACE_EPETRANEW_H

#include "NOX_Epetra_Interface_Required.H" // base class
#include "NOX_Epetra_Interface_Jacobian.H" // base class
#include "NOX_Epetra_Interface_Preconditioner.H" // base class
#include <NOX_Solver_Generic.H>
#include "Teuchos_RCP.hpp"
#include "OFunction_Nox.h"
#include "../containers.h"

// Forward Declarations
class Epetra_Comm;
class Epetra_Map; 
class Epetra_Vector;
class Epetra_Import;
class Epetra_Operator;
class Epetra_CrsGraph;
class Epetra_RowMatrix;
class Epetra_CrsMatrix;
namespace NOX {
  namespace Parameter {
    class List;
  }
}

// Finite Element Problem Class
class Nox_Interface : public NOX::Epetra::Interface::Required,
		  public NOX::Epetra::Interface::Jacobian,
		  public NOX::Epetra::Interface::Preconditioner 
{ 

  public:
  // Constructor
  Nox_Interface(OFunction_Nox* of, int NumGlobalElements, Epetra_Comm& Comm, double xmin = 0.0,
            double xmax = 1.0 );
  // Destructor
  virtual ~Nox_Interface();

  virtual bool computeF(const DistributedDoubleVector& x, DistributedDoubleVector& FVec, 
		FillType fillType = Residual);
  virtual bool computeJacobian(const DistributedDoubleVector& x, Epetra_Operator& Jac);
  virtual bool computePreconditioner(const Epetra_Vector& x,
				     Epetra_Operator& Prec,
				     Teuchos::ParameterList* precParams = 0);

  // Return a reference to the Epetra_Vector with the initial guess
  // that is generated by the Interface class.
  Teuchos::RCP<DistributedDoubleVector> getSolution();
  
  // Return a reference to the Epetra_CrsMatrix with the Jacobian
  // that is generated by the Interface class.
  Teuchos::RCP<DoubleSparseColMatrix> getJacobian();
  
  // Evaluates the function (F) and/or the Jacobian using the solution 
  // values in solnVector.
  virtual NOX::StatusTest::StatusType evaluate(Teuchos::RCP<NOX::Solver::Generic>  &nox_solver);

  //NOX parameters
  string method; //Solver
  int direction; //Method to find next step
  double ftol;  //Stopping tolerance
  int maxit; //Max. iterations
  static Teuchos::RCP<Nox_Interface> interface;
  //Interface* interface;
  double* x_svtran;
  double* FVec_svtran;
   
protected:
  // Inserts the global column indices into the Graph
  virtual bool createGraph();
  DoubleSparseColMatrix * CreateJacobian();
  // Set initial condition for solution vector
  virtual bool initializeSoln();

protected:
  enum TargetObjectType {FUNCTION, JACOBIAN};
  int NumGlobalElements;  // Total Number of elements
  int NumMyElements;      // Number of elements owned by this process
  int MyPID;              // Process number
  int NumProc;            // Total number of processes
  int n_states;
  
  double xmin;
  double xmax;
  double factor; 	  // PDE factor
  
  Epetra_Comm* Comm;
  Epetra_Map* StandardMap; 
  Epetra_Map* OverlapMap;
  Epetra_Import* Importer;
  Teuchos::RCP<DistributedDoubleVector> initialSolution;

  DistributedDoubleVector * rhs;
  Epetra_CrsGraph* Graph;
  Teuchos::RCP<DoubleSparseColMatrix> jacobian;
  Teuchos::RCP<DistributedDoubleVector> xptr;
  
  // pointer to the objective function class
  OFunction_Nox* of;
};

#endif
