// This element supplies excitation current due to incident fields to
// quasi-optical grids. It behaves as a current source applied to each
// port. The vales of the sources are read from 2 files generated by yomoma.
//
// NOTE: This implementation is somewhat primitive.
//
// Author: original transim version by Mark Summers
//         C++ version by Carlos E. Christoffersen
//
//
// +------+
// |      |----o
// |gridex|----o
// |      |    |
// |      |    ^ local reference
// |      |
// |      |
// |      |   ...
// |      |
// |      |
// |      |----o
// |      |----o
// +------+    |
//             ^
//

#ifndef GridEx_h
#define GridEx_h 1

#include <cstdio>

class GridEx : public Element
{
	public:

  GridEx(const string& iname);

  ~GridEx();

  static const char* getNetlistName()
  {
    return einfo.name;
  }

  // Check is element has been built correctly
  virtual void check() throw(string&);

  // Do some local initialization
  virtual void init() throw(string&);

  // Get a vector with the indexes of the local reference nodes.
  virtual void getLocalRefIdx(UnsignedVector& local_ref_vec,
	TerminalVector& term_list);

  // Fill MNAM
  virtual void fillMNAM(class FreqMNAM *);
  virtual void fillMNAM(TimeMNAM* mnam);
  virtual void fillSourceV(TimeMNAM* mnam);

  // State variable transient analysis
  virtual void svTran(TimeDomainSV* tdsv);
  virtual void deriv_svTran(TimeDomainSV* tdsv);

	private:

  // This function reads in the data file and counts the number of entries
  int iac_find_count(FILE *fp);

  // This function stores the data from the specified file.
  int iac_store(DenseComplexVector* c_vec_P,
	double *f_vec, FILE *fp, int f_count, int t_count);

  // This function finds the complex current for a given frequency.
  // Linear interpolation is used
  double_complex get_current(double f, unsigned port);

  // keep the last freq index for current
  int last_i_index;

  // This function returns the complex electromagnetic field value
  // for a give frequency.
  // Linear interpolation is used
  double_complex get_field(double f);

  // For transient analysis, keep a vector with current amplitudes
  DenseComplexVector tr_ivec;

  // keep the last freq index for field
  int last_e_index;

  // Number of current sources (equal to numterms / 2)
  unsigned nsources;

  // Current size of the internal current associated vectors
  unsigned ivec_size;

  // Internal current frequency vector
  double* ifreq_vec;

  // Internal current vector
  DenseComplexVector* i_vec;

  // Current size of the internal field associated vectors
  unsigned evec_size;

  // Internal field frequency vector
  double* efreq_vec;

  // Internal field vector
  DenseComplexVector* e_vec;

  // Element information
  static ItemInfo einfo;

  // Number of parameters of this element
  static const unsigned n_par;

  // Parameter variables
  string ifilename;
  string efilename;
  double my_freq;
  double delay;


  // Parameter information
  static ParmInfo pinfo[];

};

#endif

